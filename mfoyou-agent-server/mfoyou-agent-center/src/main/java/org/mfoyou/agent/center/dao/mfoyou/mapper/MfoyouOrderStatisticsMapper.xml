<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.mfoyou.agent.center.dao.mfoyou.inf.MfoyouOrderStatisticsMapper" >
  <resultMap id="BaseResultMap" type="org.mfoyou.agent.common.dao.mfoyou.domain.MfoyouOrderStatistics" >
    <id column="count_id" property="countId" jdbcType="INTEGER" />
    <result column="store_id" property="storeId" jdbcType="INTEGER" />
    <result column="day_id" property="dayId" jdbcType="INTEGER" />
    <result column="order_count" property="orderCount" jdbcType="INTEGER" />
    <result column="total_amount" property="totalAmount" jdbcType="INTEGER" />
    <result column="pay_amount" property="payAmount" jdbcType="INTEGER" />
    <result column="goods_count" property="goodsCount" jdbcType="INTEGER" />
    <result column="goods_amount" property="goodsAmount" jdbcType="INTEGER" />
    <result column="freight_amount" property="freightAmount" jdbcType="INTEGER" />
    <result column="attach_amount" property="attachAmount" jdbcType="INTEGER" />
    <result column="count_gct" property="countGct" jdbcType="TIMESTAMP" />
    <result column="count_gmt" property="countGmt" jdbcType="TIMESTAMP" />
    <result column="weight" property="weight" jdbcType="INTEGER" />
    <result column="store_amount" property="storeAmount" jdbcType="INTEGER" />
    <result column="agent_admount" property="agentAdmount" jdbcType="INTEGER" />
    <result column="admin_amount" property="adminAmount" jdbcType="INTEGER" />
    <result column="return_amount" property="returnAmount" jdbcType="INTEGER" />
    <result column="transpoet_amount" property="transpoetAmount" jdbcType="INTEGER" />
    <result column="day_str" property="date" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    count_id, store_id, day_id, order_count, total_amount, pay_amount, goods_count, goods_amount, 
    freight_amount, attach_amount, count_gct, count_gmt, weight, store_amount, agent_admount, 
    admin_amount, return_amount, transpoet_amount
  </sql>
  <select id="adminorderStatics" resultMap="BaseResultMap">
  	select SQL_CALC_FOUND_ROWS day_id,from_days(day_id) day_str,max(count_gct) count_gct,
  	sum(total_amount) total_amount,sum(pay_amount) pay_amount,sum(return_amount) return_amount,
  	sum(admin_amount) admin_amount,sum(agent_admount) agent_admount
  	 from mfoyou_order_statistics 
  	 <if test="sdate != null and edate !=null" >
     where count_gct between #{sdate} and #{edate} 
    </if>
  	 group by day_id 
  	 <if test="start != null and start > 0" >
      limit #{start} , #{end}
    </if>
  </select>
  <select id="selectAdmin" resultMap="BaseResultMap">
	select day_id,from_days(day_id) day_str,order_count,pay_amount,return_amount from(select *  from (
	select to_days(now())-7 day_id union all 
	select to_days(now())-6 day_id union all 
	select to_days(now())-5 day_id union all 
	select to_days(now())-4 day_id union all
	select to_days(now())-3 day_id) c) a left join ( select 
	sum(order_count) order_count,
	sum(pay_amount) pay_amount,
	from_days(day_id) day_str,day_id ,
	sum(return_amount) return_amount
	from mfoyou_order_statistics where day_id between 
	to_days(now())-7 and to_days(now())-3 group by day_id) b  using (day_id) order by day_id desc
  </select>
  <select id="selectcurrent" resultMap="BaseResultMap">
	select 
  	count_id, store_id, day_id, day_str ,order_count, total_amount, pay_amount, goods_count, goods_amount, 
    freight_amount, attach_amount, count_gct, count_gmt, weight, store_amount, agent_admount, 
    admin_amount, return_amount,transpoet_amount 
  	from (
	select day_id,from_days(day_id) day_str from (
	select to_days(now())-7 day_id union all 
	select to_days(now())-6 day_id union all 
	select to_days(now())-5 day_id union all 
	select to_days(now())-4 day_id union all
	select to_days(now())-3 day_id) a
	) a left join 
	(select count_id, store_id, day_id dayid ,order_count, total_amount, pay_amount, goods_count, goods_amount, 
    freight_amount, attach_amount, count_gct, count_gmt, weight, store_amount, agent_admount, 
    admin_amount, return_amount,transpoet_amount  from 
	mfoyou_order_statistics where store_id = #{storeId} ) b on a.day_id = b.dayid    order by a.day_id
  </select>
  
   <select id="getAdminStatistic" resultMap="BaseResultMap">
  	select  from_days(to_days(now())-#{daycount}) day_str,sum(order_pay_amount) pay_amount,count(*) order_count ,
  	 sum(case when order_state = 700 then order_pay_amount else 0 end) return_amount 
	from mfoyou_goods_order where 
	 order_pay_time between from_days(to_days(now())-#{daycount}) and from_days(to_days(now())+1-#{daycount})
  </select>
  <select id="selectTodaysCount" resultMap="BaseResultMap">
  	select 
	#{storeid} store_id,
	sum(order_total_amount) total_amount,
	sum(order_pay_amount) pay_amount,
	sum(order_goods_amount) goods_amount ,
	sum(order_freight_amount) freight_amount,
	sum(order_attach_amount) attach_amount,
	sum(order_store_amount) store_amount,
	sum(order_agent_admount) agent_admount,
	sum(order_admin_amount) admin_amount,
	sum(order_weight) weight,
	to_days(now())-#{daycount}  day_id,
	sum(order_goods_count) goods_count,
	from_days(to_days(now())-#{daycount}) day_str,
	sum(order_transpoet_amount) transpoet_amount,
	count(store_id) order_count 
	from mfoyou_goods_order where store_id = #{storeid} and to_days(order_pay_time) = to_days(now())-#{daycount}
	and order_state not in (30,700,800) and order_isNative = 0;
  </select>
   <select id="getTodayByAgentId" resultMap="BaseResultMap">
   	select 
	#{agentId} store_id,
	count(1) order_count,
	sum(order_total_amount) total_amount,
	sum(case when order_state between 50 and 601 then order_pay_amount else 0 end ) pay_amount,
	<choose>
		<when test="userType == 0">
			sum(case when order_state between 50 and 601 then order_agent_admount else 0 end ) agent_admount,
		</when>
		<otherwise>
			sum(case when order_state between 50 and 601 then order_station_amount else 0 end ) agent_admount,
		</otherwise>
	</choose>
	sum(case when order_state = 700 then order_pay_amount else 0 end) return_amount,
	to_days(now()) - #{daycount}  day_id,from_days(to_days(now()) - #{daycount}) day_str
	from mfoyou_goods_order where 
	<choose>
		<when test="userType == 0">
			area_agent_id =  #{agentId}
		</when>
		<otherwise>
			station_id = #{agentId}
		</otherwise>
	</choose>
	and to_days(order_pay_time) = to_days(now())- #{daycount}
  </select>
  <select id="selectSum" resultMap="BaseResultMap">
  	select 
	#{time} count_id,
	#{storeid} store_id,
	sum(order_count) order_count,
	sum(total_amount)total_amount,
	sum(pay_amount) pay_amount,
	sum(goods_count) goods_count,
	sum(goods_amount) goods_amount,
	sum(freight_amount) freight_amount,
	sum(attach_amount) attach_amount,
	sum(store_amount) store_amount,
	sum(agent_admount) agent_admount,
	sum(admin_amount) admin_amount,
	sum(transpoet_amount) transpoet_amount,
	sum(weight) weight
	from mfoyou_order_statistics where   DATE_FORMAT(count_gct,'%Y%m') = #{time} and store_id = #{storeid} 
	
  </select>
  <select id = "selectByAgentIdWeek" resultMap="BaseResultMap">
	select *  from 
	(select day_id,from_days(day_id) day_str from (
	select to_days(now())-7 day_id union all 
	select to_days(now())-6 day_id union all 
	select to_days(now())-5 day_id union all 
	select to_days(now())-4 day_id union all
	select to_days(now())-3 day_id) c) a left join (
	select sum(order_count) order_count,sum(pay_amount) pay_amount,day_str,day_id,
	sum(total_amount) total_amount,sum(agent_admount) agent_admount,sum(return_amount) return_amount from (
	select a.store_id store_id,order_count,total_amount,pay_amount,
	agent_admount,a.day_id day_id,return_amount,from_days(a.day_id)  day_str from
	(select order_count,total_amount,pay_amount,agent_admount,return_amount,day_id,store_id  from 
 	mfoyou_order_statistics where day_id between to_days(now())-7 and to_days(now())-3) a inner join (
	select store_id,to_days(store_invited_time) day_id  from huawu_store_info 
	where  store_invited_time is not null and 
	<choose>
		<when test="userType == 0">
			store_agent_id =  #{agentId}) 
		</when>
		<otherwise>
			store_station_id =  #{agentId}) 
		</otherwise>
	</choose>
	b on a.store_id = b.store_id and a.day_id >=  b.day_id  ) c 
	group by day_id  ) t using (day_id) order by day_id desc 
  </select>
  <select id = "selectByAgentId" resultMap="BaseResultMap">
  	select #{agentId} store_id,sum(order_count) order_count,sum(pay_amount) pay_amount,sum(return_amount) return_amount,day_str,
  	sum(total_amount) total_amount,sum(agent_admount) agent_admount from (
	select a.store_id store_id,order_count,total_amount,return_amount,pay_amount,agent_admount,
	a.day_id day_id,from_days(a.day_id)  day_str from
	(select order_count,total_amount,pay_amount,return_amount,agent_admount,day_id,store_id  from 
 	mfoyou_order_statistics where day_id between to_days(now())-#{dayCount} and to_days(now())-3) a inner join (
	select store_id,to_days(store_invited_time) day_id  from huawu_store_info 
	where  store_invited_time is not null and 
	<choose>
		<when test="userType == 0">
			store_agent_id =  #{agentId}) 
		</when>
		<otherwise>
			store_station_id =  #{agentId}) 
		</otherwise>
	</choose>
	b on a.store_id = b.store_id and a.day_id >=  b.day_id  ) 
	c group by day_str order by day_str desc
  </select>
  <select id = "selectAgentdataByExample" resultMap="BaseResultMap">
  select #{agentId} store_id,sum(order_count) order_count,sum(pay_amount) pay_amount,sum(return_amount) return_amount,day_str,
  	sum(total_amount) total_amount,sum(agent_admount) agent_admount from (
	select a.store_id store_id,order_count,total_amount,return_amount,pay_amount,agent_admount,
	a.day_id day_id,from_days(a.day_id)  day_str from
	(select order_count,total_amount,pay_amount,return_amount,agent_admount,day_id,store_id  from 
 	mfoyou_order_statistics where day_id between to_days(#{sdate}) and to_days(#{edate})) a inner join (
	select store_id,to_days(store_invited_time) day_id  from huawu_store_info 
	where  store_invited_time is not null and store_agent_id = #{agentId}) 
	b on a.store_id = b.store_id and a.day_id >=  b.day_id  ) 
	c group by day_str order by day_str desc
	<!-- select 
	#{agentId}  store_id,
	sum(order_count) order_count,
	sum(total_amount)total_amount,
	sum(pay_amount) pay_amount,
	sum(goods_count) goods_count,
	sum(goods_amount) goods_amount,
	sum(freight_amount) freight_amount,
	sum(attach_amount) attach_amount,
	sum(store_amount) store_amount,
	sum(agent_admount) agent_admount,
	sum(admin_amount) admin_amount,
	sum(weight) weight,
	day_id,from_days(day_id) day_str
	from mfoyou_order_statistics where day_id between to_days(#{sdate})
	and  to_days(#{edate}) and store_id in 
	(select store_id from mfoyou_store_info where store_agent_id = #{agentId} )  
	group by day_id  order by day_id desc -->
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="org.mfoyou.agent.common.dao.mfoyou.domain.MfoyouOrderStatisticsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from mfoyou_order_statistics
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from mfoyou_order_statistics
    where count_id = #{countId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from mfoyou_order_statistics
    where count_id = #{countId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="org.mfoyou.agent.common.dao.mfoyou.domain.MfoyouOrderStatisticsExample" >
    delete from mfoyou_order_statistics
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.mfoyou.agent.common.dao.mfoyou.domain.MfoyouOrderStatistics" >
    <selectKey resultType="java.lang.Integer" keyProperty="countId" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into mfoyou_order_statistics (store_id, day_id, order_count, 
      total_amount, pay_amount, goods_count, 
      goods_amount, freight_amount, attach_amount, 
      count_gct, count_gmt, weight, 
      store_amount, agent_admount, admin_amount, 
      return_amount, transpoet_amount)
    values (#{storeId,jdbcType=INTEGER}, #{dayId,jdbcType=INTEGER}, #{orderCount,jdbcType=INTEGER}, 
      #{totalAmount,jdbcType=INTEGER}, #{payAmount,jdbcType=INTEGER}, #{goodsCount,jdbcType=INTEGER}, 
      #{goodsAmount,jdbcType=INTEGER}, #{freightAmount,jdbcType=INTEGER}, #{attachAmount,jdbcType=INTEGER}, 
      #{countGct,jdbcType=TIMESTAMP}, #{countGmt,jdbcType=TIMESTAMP}, #{weight,jdbcType=INTEGER}, 
      #{storeAmount,jdbcType=INTEGER}, #{agentAdmount,jdbcType=INTEGER}, #{adminAmount,jdbcType=INTEGER}, 
      #{returnAmount,jdbcType=INTEGER}, #{transpoetAmount,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="org.mfoyou.agent.common.dao.mfoyou.domain.MfoyouOrderStatistics" >
    <selectKey resultType="java.lang.Integer" keyProperty="countId" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into mfoyou_order_statistics
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="storeId != null" >
        store_id,
      </if>
      <if test="dayId != null" >
        day_id,
      </if>
      <if test="orderCount != null" >
        order_count,
      </if>
      <if test="totalAmount != null" >
        total_amount,
      </if>
      <if test="payAmount != null" >
        pay_amount,
      </if>
      <if test="goodsCount != null" >
        goods_count,
      </if>
      <if test="goodsAmount != null" >
        goods_amount,
      </if>
      <if test="freightAmount != null" >
        freight_amount,
      </if>
      <if test="attachAmount != null" >
        attach_amount,
      </if>
      <if test="countGct != null" >
        count_gct,
      </if>
      <if test="countGmt != null" >
        count_gmt,
      </if>
      <if test="weight != null" >
        weight,
      </if>
      <if test="storeAmount != null" >
        store_amount,
      </if>
      <if test="agentAdmount != null" >
        agent_admount,
      </if>
      <if test="adminAmount != null" >
        admin_amount,
      </if>
      <if test="returnAmount != null" >
        return_amount,
      </if>
      <if test="transpoetAmount != null" >
        transpoet_amount,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="storeId != null" >
        #{storeId,jdbcType=INTEGER},
      </if>
      <if test="dayId != null" >
        #{dayId,jdbcType=INTEGER},
      </if>
      <if test="orderCount != null" >
        #{orderCount,jdbcType=INTEGER},
      </if>
      <if test="totalAmount != null" >
        #{totalAmount,jdbcType=INTEGER},
      </if>
      <if test="payAmount != null" >
        #{payAmount,jdbcType=INTEGER},
      </if>
      <if test="goodsCount != null" >
        #{goodsCount,jdbcType=INTEGER},
      </if>
      <if test="goodsAmount != null" >
        #{goodsAmount,jdbcType=INTEGER},
      </if>
      <if test="freightAmount != null" >
        #{freightAmount,jdbcType=INTEGER},
      </if>
      <if test="attachAmount != null" >
        #{attachAmount,jdbcType=INTEGER},
      </if>
      <if test="countGct != null" >
        #{countGct,jdbcType=TIMESTAMP},
      </if>
      <if test="countGmt != null" >
        #{countGmt,jdbcType=TIMESTAMP},
      </if>
      <if test="weight != null" >
        #{weight,jdbcType=INTEGER},
      </if>
      <if test="storeAmount != null" >
        #{storeAmount,jdbcType=INTEGER},
      </if>
      <if test="agentAdmount != null" >
        #{agentAdmount,jdbcType=INTEGER},
      </if>
      <if test="adminAmount != null" >
        #{adminAmount,jdbcType=INTEGER},
      </if>
      <if test="returnAmount != null" >
        #{returnAmount,jdbcType=INTEGER},
      </if>
      <if test="transpoetAmount != null" >
        #{transpoetAmount,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.mfoyou.agent.common.dao.mfoyou.domain.MfoyouOrderStatisticsExample" resultType="java.lang.Integer" >
    select count(*) from mfoyou_order_statistics
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update mfoyou_order_statistics
    <set >
      <if test="record.countId != null" >
        count_id = #{record.countId,jdbcType=INTEGER},
      </if>
      <if test="record.storeId != null" >
        store_id = #{record.storeId,jdbcType=INTEGER},
      </if>
      <if test="record.dayId != null" >
        day_id = #{record.dayId,jdbcType=INTEGER},
      </if>
      <if test="record.orderCount != null" >
        order_count = #{record.orderCount,jdbcType=INTEGER},
      </if>
      <if test="record.totalAmount != null" >
        total_amount = #{record.totalAmount,jdbcType=INTEGER},
      </if>
      <if test="record.payAmount != null" >
        pay_amount = #{record.payAmount,jdbcType=INTEGER},
      </if>
      <if test="record.goodsCount != null" >
        goods_count = #{record.goodsCount,jdbcType=INTEGER},
      </if>
      <if test="record.goodsAmount != null" >
        goods_amount = #{record.goodsAmount,jdbcType=INTEGER},
      </if>
      <if test="record.freightAmount != null" >
        freight_amount = #{record.freightAmount,jdbcType=INTEGER},
      </if>
      <if test="record.attachAmount != null" >
        attach_amount = #{record.attachAmount,jdbcType=INTEGER},
      </if>
      <if test="record.countGct != null" >
        count_gct = #{record.countGct,jdbcType=TIMESTAMP},
      </if>
      <if test="record.countGmt != null" >
        count_gmt = #{record.countGmt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.weight != null" >
        weight = #{record.weight,jdbcType=INTEGER},
      </if>
      <if test="record.storeAmount != null" >
        store_amount = #{record.storeAmount,jdbcType=INTEGER},
      </if>
      <if test="record.agentAdmount != null" >
        agent_admount = #{record.agentAdmount,jdbcType=INTEGER},
      </if>
      <if test="record.adminAmount != null" >
        admin_amount = #{record.adminAmount,jdbcType=INTEGER},
      </if>
      <if test="record.returnAmount != null" >
        return_amount = #{record.returnAmount,jdbcType=INTEGER},
      </if>
      <if test="record.transpoetAmount != null" >
        transpoet_amount = #{record.transpoetAmount,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update mfoyou_order_statistics
    set count_id = #{record.countId,jdbcType=INTEGER},
      store_id = #{record.storeId,jdbcType=INTEGER},
      day_id = #{record.dayId,jdbcType=INTEGER},
      order_count = #{record.orderCount,jdbcType=INTEGER},
      total_amount = #{record.totalAmount,jdbcType=INTEGER},
      pay_amount = #{record.payAmount,jdbcType=INTEGER},
      goods_count = #{record.goodsCount,jdbcType=INTEGER},
      goods_amount = #{record.goodsAmount,jdbcType=INTEGER},
      freight_amount = #{record.freightAmount,jdbcType=INTEGER},
      attach_amount = #{record.attachAmount,jdbcType=INTEGER},
      count_gct = #{record.countGct,jdbcType=TIMESTAMP},
      count_gmt = #{record.countGmt,jdbcType=TIMESTAMP},
      weight = #{record.weight,jdbcType=INTEGER},
      store_amount = #{record.storeAmount,jdbcType=INTEGER},
      agent_admount = #{record.agentAdmount,jdbcType=INTEGER},
      admin_amount = #{record.adminAmount,jdbcType=INTEGER},
      return_amount = #{record.returnAmount,jdbcType=INTEGER},
      transpoet_amount = #{record.transpoetAmount,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.mfoyou.agent.common.dao.mfoyou.domain.MfoyouOrderStatistics" >
    update mfoyou_order_statistics
    <set >
      <if test="storeId != null" >
        store_id = #{storeId,jdbcType=INTEGER},
      </if>
      <if test="dayId != null" >
        day_id = #{dayId,jdbcType=INTEGER},
      </if>
      <if test="orderCount != null" >
        order_count = #{orderCount,jdbcType=INTEGER},
      </if>
      <if test="totalAmount != null" >
        total_amount = #{totalAmount,jdbcType=INTEGER},
      </if>
      <if test="payAmount != null" >
        pay_amount = #{payAmount,jdbcType=INTEGER},
      </if>
      <if test="goodsCount != null" >
        goods_count = #{goodsCount,jdbcType=INTEGER},
      </if>
      <if test="goodsAmount != null" >
        goods_amount = #{goodsAmount,jdbcType=INTEGER},
      </if>
      <if test="freightAmount != null" >
        freight_amount = #{freightAmount,jdbcType=INTEGER},
      </if>
      <if test="attachAmount != null" >
        attach_amount = #{attachAmount,jdbcType=INTEGER},
      </if>
      <if test="countGct != null" >
        count_gct = #{countGct,jdbcType=TIMESTAMP},
      </if>
      <if test="countGmt != null" >
        count_gmt = #{countGmt,jdbcType=TIMESTAMP},
      </if>
      <if test="weight != null" >
        weight = #{weight,jdbcType=INTEGER},
      </if>
      <if test="storeAmount != null" >
        store_amount = #{storeAmount,jdbcType=INTEGER},
      </if>
      <if test="agentAdmount != null" >
        agent_admount = #{agentAdmount,jdbcType=INTEGER},
      </if>
      <if test="adminAmount != null" >
        admin_amount = #{adminAmount,jdbcType=INTEGER},
      </if>
      <if test="returnAmount != null" >
        return_amount = #{returnAmount,jdbcType=INTEGER},
      </if>
      <if test="transpoetAmount != null" >
        transpoet_amount = #{transpoetAmount,jdbcType=INTEGER},
      </if>
    </set>
    where count_id = #{countId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.mfoyou.agent.common.dao.mfoyou.domain.MfoyouOrderStatistics" >
    update mfoyou_order_statistics
    set store_id = #{storeId,jdbcType=INTEGER},
      day_id = #{dayId,jdbcType=INTEGER},
      order_count = #{orderCount,jdbcType=INTEGER},
      total_amount = #{totalAmount,jdbcType=INTEGER},
      pay_amount = #{payAmount,jdbcType=INTEGER},
      goods_count = #{goodsCount,jdbcType=INTEGER},
      goods_amount = #{goodsAmount,jdbcType=INTEGER},
      freight_amount = #{freightAmount,jdbcType=INTEGER},
      attach_amount = #{attachAmount,jdbcType=INTEGER},
      count_gct = #{countGct,jdbcType=TIMESTAMP},
      count_gmt = #{countGmt,jdbcType=TIMESTAMP},
      weight = #{weight,jdbcType=INTEGER},
      store_amount = #{storeAmount,jdbcType=INTEGER},
      agent_admount = #{agentAdmount,jdbcType=INTEGER},
      admin_amount = #{adminAmount,jdbcType=INTEGER},
      return_amount = #{returnAmount,jdbcType=INTEGER},
      transpoet_amount = #{transpoetAmount,jdbcType=INTEGER}
    where count_id = #{countId,jdbcType=INTEGER}
  </update>
</mapper>